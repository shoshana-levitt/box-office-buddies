// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_token     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  following        Follow[]              @relation("FollowingUser")
  followers        Follow[]              @relation("FollowedUser")
  showPreferences  UserShowPreference[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follow {
  followingUserId  String   @map("following_user_id")
  followedUserId   String   @map("followed_user_id")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relationships
  followingUser    User     @relation("FollowingUser", fields: [followingUserId], references: [id])
  followedUser     User     @relation("FollowedUser", fields: [followedUserId], references: [id])

  @@id([followingUserId, followedUserId])
  @@map("follows")
}

model Show {
  id                Int                   @id @default(autoincrement()) @map("show_id")
  showName          String                @map("show_name")
  showImageUrl      String?               @map("show_image_url")
  format            String                // play or musical
  tier              String                // broadway, off-broadway
  locationName      String                @map("location_name")
  locationAddress   String                @map("location_address")
  isCurrentlyRunning Boolean              @map("is_currently_running")
  closingDate       DateTime?             @map("closing_date")
  hasInPersonRush   Boolean               @map("has_in_person_rush")

  // Relationships
  userPreferences   UserShowPreference[]

  @@map("shows")
}

model UserShowPreference {
  id                 Int       @id @default(autoincrement())
  userId             String    @map("user_id")
  showId             Int       @map("show_id")
  hasSeen            Boolean   @default(false) @map("has_seen")
  interestLevel      String    @default("none") @map("interest_level")
  budget             Int?
  preferredCastMembers String? @map("preferred_cast_members")
  createdAt          DateTime  @default(now()) @map("created_at")

  // Relationships
  user               User      @relation(fields: [userId], references: [id])
  show               Show      @relation(fields: [showId], references: [id])

  @@map("user_show_preferences")
}
